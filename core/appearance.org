#+TITLE: Emacs' Preamble's Appearance

* General
   I have defined some modes and settings below, that directly have an effect on the appearance of
   Emacs' Preamble. O'course, this is as per my taste, and bound to change like seasons on this
   earth. At the moment, =line numbers= and =column numbers= are displayed, as I really find them
   very useful. Moreover, =cursor= blinks, =continuation lines= are displayed, and so on. Also, add
   in various functions and hooks, etc. described in [[file:./core/appearance.org][./core/appearance.org]] file.

   #+BEGIN_SRC emacs-lisp
     (global-linum-mode 1)           ; display line numbers
     (column-number-mode 1)          ; display column number in mode line

     (setq-default
      blink-cursor-delay 0        ; seconds after which cursor starts to blink
      blink-cursor-interval 0.4   ; length of cursor blink interval
      line-spacing 0.2            ; space to put between lines
      tooltip-delay 1.5           ; seconds to wait before displaying tooltip
      visible-bell t              ; try to flash the frame to represent bell
      truncate-lines nil          ; display continuation lines
      truncate-partial-width-windows nil)
     (preamble/checkpoint "configured Emacs' Preamble for better appearance")
   #+END_SRC

* WhiteSpace
    I despise =whitespace=, esp. the freaky trailing ones. So, I explicitely set them to be visible,
    and automatically remove them when buffer is saved. However, I would not like to see =trailing
    whitespace= in SQLi, inf-ruby, etc.

    #+BEGIN_SRC emacs-lisp
      (setq show-trailing-whitespace 't)
      ;; delete trailing whitespace when buffer is saved
      (add-hook 'before-save-hook 'delete-trailing-whitespace)

      ;; do not show trailing whitespace in some modes
      (dolist (hook '(term-mode-hook comint-mode-hook compilation-mode-hook))
        (add-hook hook (lambda () (setq show-trailing-whitespace nil))))

      (preamble/checkpoint "configured whitespace related settings")
    #+END_SRC
* Frame & Windows
  Frames in Emacs are, basically, today's world concept of *Windows*, i.e. an Emacs' frame is in
  naive terms the application window for Emacs. It can either be created inside Terminal by calling
  =emacsclient -t=, or as a GUI application by calling =emacsclient -c=. The code given below
  defines general settings for such a frame:
** General
  #+BEGIN_SRC emacs-lisp
    (setq frame-title-format
      '((:eval (if (buffer-file-name)
        (abbreviate-file-name (buffer-file-name)) "%b"))))
    (preamble/checkpoint "ensured that condensed file name is shown as frame's title..")

    (custom-set-variables '(initial-frame-alist
      (quote ((fullscreen . maximized)))))
    (preamble/checkpoint "ensured that Emacs' Preamble is started maximized..")
  #+END_SRC

** Hooks                                                                                     :hooks:
   Since, I use both the GUI as well as the Terminal version of Emacs, depending upon the task at
   hand, I have set up two different hooks that are binded to the =after-make-frame-functions=
   hook. Furthermore, one of these hooks pertains to the GUI version, while the other one pertains
   to the Terminal version of Emacs. These hooks are run when a new frame is created by Emacs.

   #+BEGIN_SRC emacs-lisp
     (defvar preamble/after-make-console-frame-hooks '()
       "Hooks to run after creating a new TTY frame")
     (defvar preamble/after-make-window-system-frame-hooks '()
       "Hooks to run after creating a new window-system frame")

     (defun preamble/run-after-make-frame-hooks (frame)
       "Run configured hooks in response to the newly-created FRAME.
     Selectively runs either `preamble/after-make-console-frame-hooks' or
     `preamble/after-make-window-system-frame-hooks'"
       (with-selected-frame frame
         (run-hooks (if window-system
                        'preamble/after-make-window-system-frame-hooks
                      'preamble/after-make-console-frame-hooks))))

     (add-hook 'after-make-frame-functions 'preamble/run-after-make-frame-hooks)
   #+END_SRC

** Terminal Frames                                                                       :tty:hooks:
   When making new Terminal, i.e. =tty= frames in Emacs, I want to ensure that I am able to use
   mouse there, as well as paste by clicking mouse middle button.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'preamble/after-make-console-frame-hooks
       (lambda ()
         (preamble/checkpoint "enabled mouse support in terminal session..")
         (xterm-mouse-mode 1)
         (when (fboundp 'mwheel-install) (mwheel-install))))
   #+END_SRC

** GUI Frames                                                                                  :gui:
   When making new GUI frames in Emacs, I want to disable certain GUI features, as well as add some
   customizations pertaining to the Emacs GUI.

   #+BEGIN_SRC emacs-lisp
     (setq use-file-dialog 'nil) ; use mini-buffer for file dialogs
     (setq use-dialog-box  'nil) ; use mini-buffer for everythin' else..
     (eval '(setq inhibit-startup-echo-area-message "nikhgupta"))
     ;; show an indicator in left fringe for lines not in buffer
     (setq indicate-empty-lines t)
     (preamble/checkpoint "suppressed some GUI features, I really hated..")
   #+END_SRC

** Windows                                                                           :modes:package:
   Switching windows, when more than 2 of them are open, with =C-x o= is a real pain in the fingers
   and eyes, therefore, I make use of the really nice [[http://github.com/dimitri/switch-window][switch-window]] package, as well as the
   =winner-mode= built-in Emacs. Winner Mode allows us to /undo/ (and /redo/) changes in the window
   configuration with the key commands =C-c left=, and =C-c right= (which, is pretty neat!)

   #+BEGIN_SRC emacs-lisp
     (when (fboundp 'winner-mode) (winner-mode 1))
     (preamble/checkpoint "activated Winner Mode..")

     (preamble/require-package 'switch-window)
     (require 'switch-window)
     ;; we must bind the "C-x o" key appropriately, now.
     (setq switch-window-shortcut-style 'quail)
     (preamble/checkpoint "configured `switch-window' package..")
    #+END_SRC

   Define a really handy function to quickly split the current window to open the most recent
   buffer.
   #+BEGIN_SRC emacs-lisp
     ;; Borrowed from http://postmomentum.ch/blog/201304/blog-on-emacs
     (defun preamble/split-window()
       "Split the window to see the most recent buffer in the other window.
     Call a second time to restore the original window configuration."
       (interactive)
       (if (eq last-command 'preamble/split-window)
           (progn
             (jump-to-register :preamble/split-window)
             (setq this-command 'preamble/unsplit-window))
         (window-configuration-to-register :preamble/split-window)
         (switch-to-buffer-other-window nil)))
   #+END_SRC
* Fonts
  I am, often, working on multiple monitors, and need to increase/reduce size of my fonts. For
  that particular purpose, I have defined the following functions to increase/reduce the font
  sizes, as per my needs.

  #+BEGIN_SRC emacs-lisp
    (defun preamble/font-name-replace-size (font-name new-size)
      (let ((parts (split-string font-name "-")))
        (setcar (nthcdr 7 parts) (format "%d" new-size))
        (mapconcat 'identity parts "-")))

    (defun preamble/increment-default-font-height (delta)
      "Adjust the default font height by DELTA on every frame.
    Emacs will keep the pixel size of the frame approximately the
    same.  DELTA should be a multiple of 10, to match the units used
    by the :height face attribute."
      (let* ((new-height (+ (face-attribute 'default :height) delta))
             (new-point-height (/ new-height 10)))
        (dolist (f (frame-list))
          (with-selected-frame f
            ;; Latest 'set-frame-font supports a "frames" arg, but
            ;; we cater to Emacs 23 by looping instead.
            (set-frame-font (preamble/font-name-replace-size
                             (face-font 'default)
                             new-point-height)
                            t)))
        (set-face-attribute 'default nil :height new-height)
        (message "default font size is now %d" new-point-height)))

    (defun preamble/increase-default-font-height ()
      (interactive)
      (preamble/increment-default-font-height 10))

    (defun preamble/decrease-default-font-height ()
      (interactive)
      (preamble/increment-default-font-height -10))
  #+END_SRC
