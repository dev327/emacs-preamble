#+TITLE: Emacs' Preamble's Debugger

Emacs' Preamble has an awesome debugger, inbuilt. It can help you debug where an error has occurred,
or why your Emacs' Preamble is loading so slow. In order to, activate the debugger you should set
=debug-on-error= to some =non-nil= value. I can do this directly from my =custom.el= file.

* Checkpoints
  Since, this is one huge file, it is often hard to debug where a particular error has occurred, and
  therefore, I need some visual clue of some type, a.k.a. =checkpoints=. The following functions,
  together, help me with that. I can, simply, make a call to the =preamble/checkpoint= function
  anywhere in Emacs' Preamble, in order to echo something inside =*Messages*= buffer, and
  immediately, can know nearby location of where Emacs has stopped loading Emacs' Preamble. I do not
  even want to mention the point that these checkpoints are generous, when they act as comments.

  #+BEGIN_SRC emacs-lisp
    ;; subtract two time entities
    (defun preamble/time-subtract-millis (b a)
      "Function that can subtract time string A from time string B."
      (* 1000.0 (float-time (time-subtract b a))))

    ;; convenient function to measure load-time since initialization
    (defun preamble/load-time()
      "Return total load-time from the initialization."
      (preamble/time-subtract-millis (current-time) before-init-time))

    ;; function to place check points..
    (defun preamble/checkpoint (msg)
      "Echo MSG to *Messages*, thereby, making it act as a checkpoint."
      (if debug-on-error (message "- At =%.2fms=, I %s.." (preamble/load-time) msg)))

    ;; an example of above
    (preamble/checkpoint "initialized benchmarking")
  #+END_SRC

* Benchmarking
  Moreover, since, I am a quantified-geek, I love to measure various things. Why not measure time
  taken by our Emacs configuration, as well?

  The following code/functions enables me to measure the time taken by various features in
  require'ing them, as well as total time taken to load Emacs' Preamble. When Emacs' Preamble is
  loaded and if =debug-on-error= is =non-nil=, it displays which features were =require='d, and how
  much time each such feature took. This is, especially, useful for debugging which modules are
  slowing down Emacs' Preamble.

  #+BEGIN_SRC emacs-lisp
    (defun preamble/require-time-message(feature timestamp)
      "Display a message with a TIMESTAMP from the initialization when FEATURE was loaded/required."
      (if debug-on-error ( message
          "- At =%.2fms=, I required a feature: =%s=, which took me =%0.2fms=."
          (preamble/load-time) feature timestamp)))

    (defvar preamble/require-times nil
      "A list of (FEATURE . LOAD-DURATION).
      LOAD-DURATION is the time taken in milliseconds to load FEATURE.")

    (defadvice require
      (around build-require-times (feature &optional filename noerror) activate)
      "Note in `preamble/require-times' the time taken to require each feature."
      (let* ((already-loaded (memq feature features))
             (require-start-time (and (not already-loaded) (current-time))))
        (prog1
            ad-do-it
          (when (and (not already-loaded) (memq feature features) debug-on-error)
              (setq feature-required-time
                    (preamble/time-subtract-millis (current-time) require-start-time))
              (preamble/require-time-message feature feature-required-time)
              (add-to-list 'preamble/require-times
                         (cons feature
                               (preamble/time-subtract-millis (current-time)
                                                              require-start-time))
                         t)))))
  #+END_SRC
